#!/bin/bash
echo "$(date): AutoHotspot starting"

wifidev="wlan0"

IFSdef=$IFS
# These four lines capture the wifi networks the RPi is setup to use
# Explanation: Find all lines containing 'ssid' in the wpa_supplicant-$wifidev.conf file, then remove
# all lines that start with a comment character. Finally extract the SSID name by splitting
# on the quote
wpassid=$(grep ssid /etc/wpa_supplicant/wpa_supplicant-$wifidev.conf | egrep -v "^#" | awk -F\" '{print $2}')
IFS=","
ssids=($wpassid)
IFS=$IFSdef #reset back to defaults


#Note:If you only want to check for certain SSIDs
#Remove the # in in front of ssids=('mySSID1'.... below and put a # infront of all four lines above
# separated by a space, eg ('mySSID1' 'mySSID2')
#ssids=('mySSID1' 'mySSID2' 'mySSID3')

#Enter the Routers Mac Addresses for hidden SSIDs, seperated by spaces ie 
#( '11:22:33:44:55:66' 'aa:bb:cc:dd:ee:ff' ) 
mac=()

ssidsmac=("${ssids[@]}" "${mac[@]}") #combines ssid and MAC for checking

createAdHocNetwork()
{
    ip link set dev "$wifidev" down
    ip a add 10.0.0.5/24 brd + dev "$wifidev"
    ip link set dev "$wifidev" up
    systemctl start dnsmasq
    systemctl start hostapd
}

KillHotspot()
{
    echo "Shutting Down"
    ip link set dev "$wifidev" down
    systemctl stop hostapd
    systemctl stop dnsmasq
    ip addr flush dev "$wifidev"
    ip link set dev "$wifidev" up
}

ChkWifiUp()
{
  echo "Checking connection"
  sleep 15 #give time for connection to be completed to router
  if ! /sbin/wpa_cli -i "$wifidev" status | grep 'ip_address' >/dev/null 2>&1
    then #Failed to connect to wifi (check your wifi settings, password etc)
        echo 'Error'
        /usr/sbin/service wpa_supplicant@$wifidev stop
        createAdHocNetwork
        # Create a failed timestamp that will be checked against the timestamp of wpa_supplicant-$wifidev.conf
        date +%s > /var/log/autohotspot_last_failed_timestamp
  else
        echo "Wifi appears to be up"
  fi
}

FindSSID()
{
#Check to see what SSID's and MAC addresses are in range
ssidChk=('NoSSid')
i=0; j=0
until [ $i -eq 1 ] #wait for wifi if busy, usb wifi is slower.
do
        ssidreply=$((/sbin/iw dev "$wifidev" scan ap-force | egrep "^BSS|SSID:") 2>&1) >/dev/null 2>&1 
  if echo "$ssidreply" | grep "No such device (-19)" >/dev/null 2>&1; then
    NoDevice
  elif ! echo "$ssidreply" | grep "resource busy (-16)"  >/dev/null 2>&1 ;then
    i=1
  elif (($j >= 5)); then #if busy 5 times goto hotspot
                 ssidreply=""
     i=1
  else #see if device not busy in 2 seconds
    j=$((j = 1))
    sleep 2
  fi
done

for ssid in "${ssidsmac[@]}"
do
     if (echo "$ssidreply" | grep "$ssid") >/dev/null 2>&1
     then
        #Valid SSid found, passing to script
              ssidChk=$ssid
              return 0
      else
        #No Network found, NoSSid issued"
              ssidChk='NoSSid'
     fi
done
}

NoDevice()
{
  #if no wifi device,ie usb wifi removed, activate wifi so when it is
  #reconnected wifi to a router will be available
  echo "No wifi device connected"
  /usr/sbin/service wpa_supplicant@$wifidev start
  exit 1
}

FindSSID

#Create Hotspot or connect to valid wifi networks
# If we have failed to connect since the last time the wifi information was updated, don't connect
wpa_supplicant_conf_last_modified_timestamp=$(date +%s -r /etc/wpa_supplicant/wpa_supplicant-$wifidev.conf)
last_failed_timestamp=$(cat /var/log/autohotspot_last_failed_timestamp)
if [ "$ssidChk" != "NoSSid" ] && [ $wpa_supplicant_conf_last_modified_timestamp -gt $last_failed_timestamp ]
then
       if systemctl status hostapd | grep "(running)" >/dev/null 2>&1
       then #hotspot running and ssid in range
              KillHotspot
              echo "Deactivated"
              /usr/sbin/service wpa_supplicant@$wifidev start
              ChkWifiUp
       elif { /sbin/wpa_cli -i "$wifidev" status | grep 'ip_address'; } >/dev/null 2>&1
       then #Already connected
              echo "Already connected"
       else #ssid exists and no hotspot running connect to wifi network
              echo "Connecting"
              /usr/sbin/service wpa_supplicant@$wifidev start
              ChkWifiUp
       fi
else #ssid or MAC address not in range, or wifi info not modified since last failed connection attempt
       if [ $wpa_supplicant_conf_last_modified_timestamp -lt $last_failed_timestamp ]
       then
              echo "Last modified timestamp of /etc/wpa_supplicant/wpa_supplicant-$wifidev.conf is less than time in /var/log/autohotspot_last_failed_timestamp. Please update/correct conf file."
       fi
       if systemctl status hostapd | grep "(running)" >/dev/null 2>&1
       then
              echo "Hostspot already active"
       elif { /sbin/wpa_cli status | grep "$wifidev"; } >/dev/null 2>&1
       then
              echo "Cleaning wifi files and Activating Hotspot"
              /usr/sbin/service wpa_supplicant@$wifidev stop
              ip addr flush "$wifidev"
              ip link set dev "$wifidev" down
              rm -r /var/run/wpa_supplicant >/dev/null 2>&1
              ip link set dev "$wifidev" up
              createAdHocNetwork
       else #"No SSID, activating Hotspot"
              createAdHocNetwork
       fi
fi
